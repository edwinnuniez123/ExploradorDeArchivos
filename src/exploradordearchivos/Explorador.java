/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package exploradordearchivos;

import java.io.*;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JOptionPane;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;
import javax.swing.filechooser.FileSystemView;


/**
 *
 * @author Edwin
 */
public class Explorador extends javax.swing.JFrame {

    DefaultListModel dm=new DefaultListModel();
    
    DefaultListModel clickderecho=new DefaultListModel();
    final JPopupMenu pop=new JPopupMenu();
    String row="";
    int index = 0;
    
    //private JList lista;
    private JTextArea tekst;
    DefaultListModel model;
    /**
     * Creates new form Explorador
     */
    public Explorador() {
        initComponents();
        
        
        explorador = new JList<>(model = new DefaultListModel<String>());
       
       
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(new JScrollPane(explorador));
        getContentPane().add(btnCarpeta,BorderLayout.SOUTH);
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
        //setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        
        addPopup();
        
        /*explorador = new JList(new File("C:\\").listFiles());
        explorador.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        explorador.setCellRenderer(new MyCellRenderer());
        explorador.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        explorador.setName("displayList");
        JFrame f = new JFrame("Files In the JList");
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.setPreferredSize(new Dimension(500, 300));
        explorador.setVisibleRowCount(-1);
        f.add(new JScrollPane(explorador));
        f.pack();
        f.setVisible(true);*/
        
        
     /*   String path = null;
        
        File f = new File(path);
        File[] imgs = f.listFiles();
        JList lista = new JList(imgs);*/ 
        
        /*JList lista = new JList();
        /*DefaultListModel modelo = new DefaultListModel();
        for(int i = 1; i<=10; i++){
            modelo.addElement(i);
        }
        lista.setModel(modelo);*/
        
        
    }
    
    /*private void agregar(){
        dm.clear();
        
        dm.addElement(new Archivo("Nueva carpeta", new ImageIcon("C:\\Users\\Edwin\\Documents\\Trabajos\\sistemas_operativos_2\\ExploradorDeArchivos\\src\\Imagenes\\cartella2.jpg")));
        dm.addElement(new Archivo("Nueva carpeta", new ImageIcon("C:\\Users\\Edwin\\Documents\\Trabajos\\sistemas_operativos_2\\ExploradorDeArchivos\\src\\Imagenes\\archivo.png")));
        
        explorador.setCellRenderer(new Listado());
        explorador.setModel(dm);
    }*/
    
    private void populate(String name){
        clickderecho.addElement(name);
        explorador.setModel(clickderecho);
    }
    
    private void addPopup(){
        JMenuItem show = new JMenuItem("Show");
        JMenuItem eliminar = new JMenuItem("Eliminar");
        
        
        pop.add(show);
        pop.add(eliminar);
        
        
        show.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                JOptionPane.showMessageDialog(null, "showed"+row);
            }
        });
        eliminar.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                clickderecho.removeElementAt(index);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        explorador = new javax.swing.JList();
        btnCarpeta = new javax.swing.JButton();
        btnContenido = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        btnArchivo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        explorador.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        explorador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exploradorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(explorador);

        btnCarpeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cartella.jpg"))); // NOI18N
        btnCarpeta.setMaximumSize(new java.awt.Dimension(141, 137));
        btnCarpeta.setMinimumSize(new java.awt.Dimension(141, 137));
        btnCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarpetaActionPerformed(evt);
            }
        });

        btnContenido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/contenido.jpg"))); // NOI18N
        btnContenido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContenidoActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jTextField1.setText("Este Equipo");

        btnArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/1.png"))); // NOI18N
        btnArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnContenido, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(87, 87, 87)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addComponent(jTextField1))
                .addContainerGap(137, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnContenido)
                        .addGap(18, 18, 18)
                        .addComponent(btnArchivo)))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarpetaActionPerformed
        // TODO add your handling code here:
       // agregar();
         
    }//GEN-LAST:event_btnCarpetaActionPerformed

    private void btnContenidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContenidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnContenidoActionPerformed

    private void exploradorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exploradorMouseClicked
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, explorador.getSelectedValue().toString());
        
        //click derecho select
        explorador.setSelectedIndex(explorador.locationToIndex(evt.getPoint()));
        row=explorador.getSelectedValue().toString();
        index=explorador.getSelectedIndex();
        
        //determine si tiene click derecho
        if(SwingUtilities.isRightMouseButton(evt) && explorador.locationToIndex(evt.getPoint())==index)
        {
            if(! explorador.isSelectionEmpty())
                pop.show(explorador, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_exploradorMouseClicked

    private void btnArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(true);
        fc.showOpenDialog(new JFrame());
        File[] selectedFiles = fc.getSelectedFiles();
        for(File f : selectedFiles){
            model.addElement(f.getName());
        }
        
        //populate(explorador.getSelectedIndices().toString());
    }//GEN-LAST:event_btnArchivoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Explorador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Explorador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Explorador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Explorador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Explorador().setVisible(true);
                
            }
        });
    }
    
     private static class MyCellRenderer extends DefaultListCellRenderer  {

        private static final long serialVersionUID = 1L;

        @Override
        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {
            if (value instanceof File) {
                File file = (File) value;
                setText(file.getName());
                setIcon(FileSystemView.getFileSystemView().getSystemIcon(file));
                if (isSelected) {
                    setBackground(list.getSelectionBackground());
                    setForeground(list.getSelectionForeground());
                } else {
                    setBackground(list.getBackground());
                    setForeground(list.getForeground());
                }
                setEnabled(list.isEnabled());
                setFont(list.getFont());
                setOpaque(true);
            }
            return this;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArchivo;
    private javax.swing.JButton btnCarpeta;
    private javax.swing.JButton btnContenido;
    private javax.swing.JList explorador;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    /* 
    
    private File currentDir;//variable para saber el directorio actual
    private File currentFile;
    private String linea = "", txt;
    private Archivos archivo;
    private String command = "";
    
     public void CrearCarpeta() {
        String[] sp = null;//variable para extraer el nombre de la carpeta
        String nom = "";//variable que contendra el nombre de la carpeta
        try {
            //Dependiendo de si escribió el comando en minuscula o en mayuscula
            if (linea.startsWith(currentDir.getPath() + ">mkdir ")) {
                sp = linea.split(">mkdir ");//extraer el nombre
            }
            if (linea.startsWith(currentDir.getPath() + ">MKDIR ")) {
                sp = linea.split(">MKDIR ");//extraer el nombre
            }
            if (sp[1].contains("mkdir") || sp[1].contains("MKDIR")) {
                jTextArea1.append("No se puede utilizar palabras reservadas como un nombre");
            }
            nom = sp[1];

            File nuevaCarpeta = new File(currentDir.getPath() + "\\" + nom);//variable para crear una nueva carpeta
            nuevaCarpeta.mkdir();//crear la carpeta
            jTextArea1.append("\tSe ha creado la carpeta: " + nom);// para saber si se creó
        } catch (Exception ex) {
           jTextArea1.append("\t" + ex.getMessage());
        }
    }
    
    public String muestraContenido(File archivo) throws FileNotFoundException, IOException {
        String cadena;
        String texto="";
        FileReader f = new FileReader(archivo);
        BufferedReader b = new BufferedReader(f);
        while((cadena = b.readLine())!=null) {
            texto+=cadena+"\n";
        }
        b.close();
        
        return texto;
    }
    
    public void VerArchivo() throws IOException {
        String[] sp = null;//variable para extraer el nombre de la carpeta
        String nom = "";//variable que contendra el nombre de la carpeta
        try {
            //Dependiendo de si escribió el comando en minuscula o en mayuscula
            if (linea.startsWith(currentDir.getPath() + ">cat ")) {
                sp = linea.split(">cat ");//extraer el nombre
            }
            if (linea.startsWith(currentDir.getPath() + ">CAT ")) {
                sp = linea.split(">CAT ");//extraer el nombre
            }
            if (sp[1].contains("cat") || sp[1].contains("CAT")) {
                jTextArea1.append("No se puede utilizar palabras reservadas como un nombre");
            }
            nom = sp[1];

            //capturar el texto que el usuario escribio
           //String nombre;
           boolean encontro = false;
            
            File nuevoArchivo = new File(currentDir.getPath() + "\\" + nom);//variable para ver archivo
             if (nuevoArchivo.isFile()) {
                if (encontro) {
                    currentDir = new File(currentDir.getPath() + "\\"  +nom+ "\\");//posicionarse en la carpeta destino
                     jTextArea1.append("\t No se encontró el archivo: \n" +  muestraContenido(nuevoArchivo) + "\\");
                } else {
                    jTextArea1.append("\t se encontró el archivo: \n" + muestraContenido(nuevoArchivo) + "\\");// para saber si encontro
                }
            } else {
                jTextArea1.append("\tNo es un archivo: ");// cuando no es un directorio
            }
            //nuevoArchivo.createNewFile();//crear la archivo
           //jTextArea1.append("\tSe ha creado el archivo: " + nom);// para saber si se creó
        } catch (Exception ex) {
           jTextArea1.append("\t" + ex.getMessage());
        }
    }
     
     public void CrearArchivo() throws IOException {
        String[] sp = null;//variable para extraer el nombre de la carpeta
        String nom = "";//variable que contendra el nombre de la carpeta
        try {
            //Dependiendo de si escribió el comando en minuscula o en mayuscula
            if (linea.startsWith(currentDir.getPath() + ">cat>")) {
                sp = linea.split(">cat> ");//extraer el nombre
            }
            if (linea.startsWith(currentDir.getPath() + ">CAT> ")) {
                sp = linea.split(">CAT> ");//extraer el nombre
            }
            if (sp[1].contains("cat>") || sp[1].contains("CAT>")) {
                jTextArea1.append("No se puede utilizar palabras reservadas como un nombre");
            }
            nom = sp[1];

            //capturar el texto que el usuario escribio
           //String nombre;
           boolean encontro = false;
            
            File nuevoArchivo = new File(currentDir.getPath() + "\\" + nom);//variable para ver archivo
            this.currentFile = nuevoArchivo;
             if (nuevoArchivo.isFile()) {
                if (encontro) {
                    currentDir = new File(currentDir.getPath() + "\\"  +nom+ "\\");//posicionarse en la carpeta destino
                     jTextArea1.append("\t No se encontró el archivo: \n" +  escribirContenido(nuevoArchivo) + "\\");
                } else {
                   // jTextArea1.append("\t se encontró el archivo: \n" + muestraContenido(nuevoArchivo) + "\\");
                    jTextArea1.append("\t se encontró el archivo: \n" + escribirContenido(nuevoArchivo) + "\\");// para saber si encontro
                }
            } else {
                jTextArea1.append("\tNo es un archivo: ");// cuando no es un directorio
            }
             
             
            //nuevoArchivo.createNewFile();//crear la archivo
           //jTextArea1.append("\tSe ha creado el archivo: " + nom);// para saber si se creó
        } catch (Exception ex) {
           jTextArea1.append("\t" + ex.getMessage());
        }
    }
    
    public void EliminarCarpeta() {
        String[] sp = null;//variable para extraer el nombre de la carpeta
        String nom = "";//variable que contendra el nombre de la carpeta
        try {
            //Dependiendo de si escribió el comando en minuscula o en mayuscula
            if (linea.startsWith(currentDir.getPath() + ">rmdir ")) {
                sp = linea.split(">rmdir ");//extraer el nombre
            }
            if (linea.startsWith(currentDir.getPath() + ">RMDIR ")) {
                sp = linea.split(">RMDIR ");//extraer el nombre
            }
            if (sp[1].contains("rmdir ") || sp[1].contains("RMDIR ")) {
                jTextArea1.append("No se puede utilizar palabras reservadas como un nombre");
            }
            nom = sp[1];
            String[] lst = currentDir.list();
            boolean encontro = false;
            for (int i = 0; i < lst.length; i++) {//ciclo para buscar la carpeta en el directorio
                if (lst[i].equals(nom)) {
                    encontro = true;
                    break;
                }
            }
            if (currentDir.isDirectory()) {//si es una carpeta
                if (encontro) {
                    currentDir = new File(currentDir.getPath() + "\\" + nom + "\\");//colocarse en la carpeta a eliminar
                    if (currentDir.delete()) {//si se pudo borrar                        
                    } else {
                        borrarDirectorio(currentDir);//ir al metodo para eliminar directorios interiores
                        currentDir.delete();//eliminar la carpeta ya vacia
                    }
                    currentDir = new File(currentDir.getParent());//colocarse en la carpeta padre de la carpeta eliminada
                    jTextArea1.append("\tCarpeta " + nom + "\\ eliminada");
                } else {
                    jTextArea1.append("\tNo se encontró la carpeta: " + nom + "\\");// para saber si encontro
                }
            } else {
                jTextArea1.append("\tNo es una carpeta: ");// cuando no es un directorio
            }
        } catch (Exception ex) {//en caso de que el nombre sea un comando
            jTextArea1.append("\t" + ex.getMessage());
        }
    }
    
    public void borrarDirectorio(File directorio) {
        File[] ficheros = directorio.listFiles();
        for (int x = 0; x < ficheros.length; x++) {
            if (ficheros[x].isDirectory()) {
                borrarDirectorio(ficheros[x]);
            }
            ficheros[x].delete();
        }
    }
    
    public void borrarArchivo(File archivo) {
        File[] ficheros = archivo.listFiles();
        for (int x = 0; x < ficheros.length; x++) {
            if (ficheros[x].isFile()) {
                borrarArchivo(ficheros[x]);
            }
            ficheros[x].delete();
        }
    }
    */
}
